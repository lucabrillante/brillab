#' Perform anovas and multiple comparison tests on subset of a data frame
#'
#' This function performs anova statistics for a full dataset split by user defined groups (e.g. Dates)
#' for trend measurements. It also provides two kinds of multiple comparison tests
#' Dunnet against the control and Tukey HSD.
#'
#' @param formula formula to be passed to the \code{stats::aov} function
#' @param df data frame. Ideally from the lab template
#' @param time_range NULL(default) do not select specific time range. Or take one single value "2020-12-31" for selecting a specific date,
#'  or a vector of two values indicating the start and end c("2020-12-31", "2021-01-31"). The extremes of the range are included. Use only when group_col is a date column.
#' @param group_col column specifying the grouping variable. E.g. the name (character) or index (number)
#'  of the date column for analysis repeated over time.
#' @param treat_col treatment column as name (character) or index (number)
#' @param treatment_level vector of characters corresponding to the desired order of levels
#'  in \code{treat_col}. The control should be the first level
#' @param what can have values "summary" for anova summaries only,
#' "tukey" for Tukey HSD, "dunnett" for Dunnett comparisons against the one treatment (the ctrl)
#' and "all" for all of the above. Print to the console.
#' @param return_models TRUE or FALSE (default) to return a list of the anova models for further analysis
#'
#' @return a list of anova models when \code{return_models} is true
#'
#' @examples
#'
#' #for RCBD run (here an example from infiltration measurements in the AVF Salt Stress project)
#' by_group_anovas(formula = Time ~ Treatment + Block, df,
#' date_col = "Date", treat_col = "Treatment",
#' treatment_level = c("CTRL", "50G", "100G", "200G", "100GC", "100A"),
#' what = "all", return_models = FALSE)

by_group_anovas <- function(formula = SWP ~ Treatment + Block,
                            df,
                            time_range = NULL,
                            group_col = "Date",
                            treat_col = "Treatment",
                            treatment_level = NULL,
                            what = "summary",
                            return_models = FALSE) {
  #TO DO: code will be easier to maintain if this preliminary section which is
  #similar to many other function in the package goes to an internal function, so
  #to avoid repetitions
  require(dplyr)
  require(agricolae)
  require(multcomp)

  df <- rename(df,
               "Group" = names(df[group_col]),
               "Treatment" = names(df[treat_col]))

  what <- match.arg(what, c("summary", "tukey", "dunnett", "all"))

  if (!is.null(time_range)) {
    warning("using the grouping column as a date column for selecting time range")
    if (length(time_range) == 1) {
      df <- df[df$Group == time_range[1], ]
    } else {
      df <- df[df$Group >= time_range[1] & df$Group <= time_range[2], ]
    }
  }

  if (!is.null(treatment_level)) {
    df$Treatment <- factor(df$Treatment, levels = treatment_level)
  }
  df$Treatment <- as.factor(df$Treatment)

  #actual fuction core -----
  models <- lapply(unique(df$Group), function(x)
    mod1 <- aov(formula, data = df[df$Group == x, ]))
  names(models) <- paste0("--------   ", unique(df$Group), "   --------")

  if (what == "summary" | what == "all") {
    cat("\n\n\n\n\t\t\tANOVA\n\n\n\n")
    print(lapply(models, summary))
    }

  if (what == "tukey" | what == "all") {
    cat("\n\n\n\n\t\t\tTUKEYS\n\n\n\n")
    tukeys <- sapply(names(models), function(x){
      cat(" -----------------------------------------------------------------------",
          paste0("\n\t\t  "),
          x,
          "\n",
          "-----------------------------------------------------------------------")
      tukey <- HSD.test(models[[x]], "Treatment",
                        group = TRUE, console = TRUE)})
  }

  if (what == "dunnett" | what == "all") {
    cat("\n\n\n\n\t\t\tDUNNETT\n\n\n\n")
    lapply(names(models), function(x){
      cat(" -----------------------------------------------------------------------",
          paste0("\n\t\t  "),
          x,
          "\n",
          "-----------------------------------------------------------------------")
      dunnet <- glht(models[[x]], linfct = mcp(Treatment = "Dunnett"))
      print(summary(dunnet))
    })
  }

  if (return_models == TRUE) return(models)
}
