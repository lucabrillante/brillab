by_group_anovas(SWP ~ Treatment + Block, df, treatment_level = avf_ss_treatments)
rm(treatment_level)
#make the anovas
by_group_anovas(SWP ~ Treatment + Block, df, treatment_level = avf_ss_treatments)
#make the anovas
by_group_anovas(SWP ~ Treatment + Block, df, treatment_level = avf_ss_treatments,
group_col = "Date", treat_col = "Treatment")
#make the anovas
by_group_anovas(SWP ~ Treatment + Block, df, treatment_level = avf_ss_treatments,
time_range = "2020-01-01")
#make the anovas
by_group_anovas(SWP ~ Treatment + Block, df, treatment_level = avf_ss_treatments,
time_range = "2020-01-01", what = "all")
by_group_anovas <- function(formula = SWP ~ Treatment + Block, df,
time_range = NULL,
group_col = "Date",
treat_col = "Treatment",
treatment_level = NULL,
what = "summary",
return_models = FALSE) {
#TO DO: code will be easier to maintain if this preliminary section which is
#similar to many other function in the package goes to an internal function, so
#to avoid repetitions
require(dplyr)
require(agricolae)
require(multcomp)
df <- rename(df,
"Group" = names(df[group_col]),
"Treatment" = names(df[treat_col]))
what <- match.arg(what, c("summary", "tukey", "dunnett", "all"))
if (!is.null(time_range)) {
warning("using the grouping column as a date column for selecting time range")
if (length(time_range) == 1) {
df <- df[df$Group == time_range[1], ]
} else {
df <- df[df$Group >= time_range[1] & df$Group <= time_range[2], ]
}
}
if (!is.null(treatment_level)) {
df$Treatment <- factor(df$Treatment, levels = treatment_level)
}
df$Treatment <- as.factor(df$Treatment)
#actual fuction core -----
models <- lapply(unique(df$Group), function(x)
mod1 <- aov(formula, data = df[df$Group == x, ]))
names(models) <- paste0("--------   ", unique(df$Group), "   --------")
if (what == "summary" | what == "all") {
cat("\n\n\n\n\t\t\tANOVA\n\n\n\n")
print(lapply(models, summary))
}
if (what == "tukey" | what == "all") {
cat("\n\n\n\n\t\t\tTUKEYS\n\n\n\n")
print(lapply(models, summary))
tukeys <- sapply(names(models), function(x){
cat(" -----------------------------------------------------------------------",
paste0("\n\t\t  "),
x,
"\n",
"-----------------------------------------------------------------------")
tukey <- HSD.test(models[[x]], "Treatment",
group = TRUE, console = TRUE)})
}
if (what == "dunnett" | what == "all") {
cat("\n\n\n\n\t\t\tDUNNETT\n\n\n\n")
lapply(names(models), function(x){
cat(" -----------------------------------------------------------------------",
paste0("\n\t\t  "),
x,
"\n",
"-----------------------------------------------------------------------")
dunnet <- glht(models[[x]], linfct = mcp(Treatment = "Dunnett"))
print(summary(dunnet))
})
}
if (return_models == TRUE) return(models)
}
#make the anovas
by_group_anovas(SWP ~ Treatment + Block, df, treatment_level = avf_ss_treatments,
time_range = "2020-01-01", what = "all")
library(brillab)
rm(by_group_anovas())
rm(by_group_anovas)
#Stem water potential ----------------------------------------------------------
#load the dataset in the sheet
df <- read_xlsx("G:/My Drive/Documents/RProjects/lab_analysis/AVF_SaltStress.xlsx",
sheet = "S_SWP", na = "NA")
#make the plot
swp_trend(df, time_range = "2020-01-01")
#make the anovas
by_group_anovas(SWP ~ Treatment + Block, df, treatment_level = avf_ss_treatments,
time_range = "2020-01-01", what = "all")
library(brillab)
#make the anovas
by_group_anovas(SWP ~ Treatment + Block, df, treatment_level = avf_ss_treatments,
time_range = "2020-01-01", what = "all")
#make the plot
swp_trend(df, time_range = c("2020-01-01","2020-12-31")
)
#make the anovas
by_group_anovas(SWP ~ Treatment + Block, df, treatment_level = avf_ss_treatments,
what = "all", time_range = c("2020-01-01","2020-12-31"))
#make the anovas
by_group_anovas(SWP ~ Treatment + Block, df, treatment_level = avf_ss_treatments,
what = "all")
#make the anovas
by_group_anovas(SWP ~ Treatment + Block, df, treatment_level = avf_ss_treatments,
what = "all")
library(brillab)
#make the anovas
by_group_anovas(SWP ~ Treatment + Block, df, treatment_level = avf_ss_treatments,
what = "all")
require(readxl)
df <- read_xlsx("G:/My Drive/Documents/RProjects/lab_analysis/AVF_SaltStress.xlsx",
sheet = "S_Single_Ring_Infiltration", na = "NA")
trend_plot(df, y = "Time", palette = colorblind_palettes("wong"))
trend_anovas(formula = Time ~ Treatment + Block, df, date_col = "Date", treat_col = "Treatment",
time_range = "all", treatment_level = c("CTRL", "50G", "100G", "200G", "100GC", "100A"),
what = "dunnett", return_models = FALSE)
#AVF SALT STRESS DATA ANALYSIS
#This will show how to use the brillab package to analyse the data in the AVF Salt Stress
require(readxl) #this is needed to read our template file
require(brillab)
# General ----------------------------------------------------------------------
#assign treatment level in the order that makes sense, otherwise is alphabetical
#We want the control to be the first one.
avf_ss_treatments <- c("CTRL", "100A", "50G", "100G", "200G", "100GC")
analysis_time_range <- c("2020-01-01", "2020-12-31")
#Stem water potential ----------------------------------------------------------
#load the dataset in the sheet
df <- read_xlsx("G:/My Drive/Documents/RProjects/lab_analysis/AVF_SaltStress.xlsx",
sheet = "S_SWP", na = "NA")
#because we store swp values as positive and bars we want to change this
df$SWP <- df$SWP * -0.1
#make the plot
trend_plot(df, time_range = c("2020-01-01","2020-12-31"),
plot_title = "Plant Water Status",
y_lab = "Stem Water Potential (MPa)",
treatment_level = avf_ss_treatments)
#make the anovas
by_group_anovas(SWP ~ Treatment + Block, df, treatment_level = avf_ss_treatments,
what = "all", time_range = analysis_time_range)
#Yield ------------------------------------------------------------------------
df <- read_xlsx("G:/My Drive/Documents/RProjects/lab_analysis/AVF_SaltStress.xlsx",
sheet = "S_Yield", na = "NA")
#Yield per plant
yield_plot <- bar_plot(df,
time_range = analysis_time_range,
y = "Net_Weight",
plot_title = "Yield",
y_lab = "Yield per plant (kg)",
treatment_level = avf_ss_treatments)
#cluster number
cluster_number_plot <- bar_plot(df,
time_range = analysis_time_range,
y = "Cluster_count",
plot_title = "Cluster number",
y_lab = "Cluster number per plant",
treatment_level = avf_ss_treatments)
#average cluster weight in g per cluster
df$cluster_weight <- df$Net_Weight/df$Cluster_count * 1000
cluster_weight_plot <- bar_plot(df,
time_range = analysis_time_range,
y = "cluster_weight",
plot_title = "Average cluster weight",
y_lab = "Cluster weight (g)",
treatment_level = avf_ss_treatments)
Rmisc::multiplot(yield_plot, cluster_number_plot, cluster_weight_plot, cols = 3)
by_group_anovas(Net_Weight ~ Treatment + Block, df, treatment_level = avf_ss_treatments,
what = "all", time_range = analysis_time_range)
by_group_anovas(Cluster_count ~ Treatment + Block, df, treatment_level = avf_ss_treatments,
what = "all", time_range = analysis_time_range)
by_group_anovas(cluster_weight ~ Treatment + Block, df, treatment_level = avf_ss_treatments,
what = "all", time_range = analysis_time_range)
#GOOD: average cluster weight in the 200G anova is significanly different from the control in
#the Dunnett test
#Wet Chem ----------------------------------------------------------------------
df <- read_xlsx("G:/My Drive/Documents/RProjects/lab_analysis/AVF_SaltStress.xlsx",
sheet = "S_Berry_wet_chem", na = "NA")
berry_weight_plot <- trend_plot(df,
time_range = analysis_time_range,
y = "berry_weight",
plot_title = "Average berry weight",
y_lab = "berry weight (g)",
treatment_level = avf_ss_treatments)
by_group_anovas(berry_weight ~ Treatment + Block, df, treatment_level = avf_ss_treatments,
what = "all", time_range = analysis_time_range)
#berry weight is not significantly different
df <- read_xlsx("G:/My Drive/Documents/RProjects/lab_analysis/AVF_SaltStress.xlsx",
sheet = "S_Berry_wet_chem", na = "NA")
brix_plot <- trend_plot(df,
time_range = analysis_time_range,
y = "Brix",
plot_title = "Average berry weight",
y_lab = "berry weight (g)",
treatment_level = avf_ss_treatments)
by_group_anovas(Brix ~ Treatment + Block, df, treatment_level = avf_ss_treatments,
what = "all", time_range = analysis_time_range)
#
df <- read_xlsx("G:/My Drive/Documents/RProjects/lab_analysis/AVF_SaltStress.xlsx",
sheet = "S_Berry_wet_chem", na = "NA")
pH_plot <- trend_plot(df,
time_range = analysis_time_range,
y = "pH",
plot_title = "Average berry weight",
y_lab = "berry weight (g)",
treatment_level = avf_ss_treatments)
by_group_anovas(pH ~ Treatment + Block, df, treatment_level = avf_ss_treatments,
what = "all", time_range = analysis_time_range)
#
df <- read_xlsx("G:/My Drive/Documents/RProjects/lab_analysis/AVF_SaltStress.xlsx",
sheet = "S_Berry_wet_chem", na = "NA")
TA_plot <- trend_plot(df,
time_range = analysis_time_range,
y = "TA",
plot_title = "Average berry weight",
y_lab = "berry weight (g)",
treatment_level = avf_ss_treatments)
by_group_anovas(TA ~ Treatment + Block, df, treatment_level = avf_ss_treatments,
what = "all", time_range = analysis_time_range)
#Yield ------------------------------------------------------------------------
df <- read_xlsx("G:/My Drive/Documents/RProjects/lab_analysis/AVF_SaltStress.xlsx",
sheet = "S_Yield_homogeneous_vines", na = "NA")
#Yield per plant
yield_plot <- bar_plot(df,
time_range = analysis_time_range,
y = "Net_Weight",
plot_title = "Yield",
y_lab = "Yield per plant (kg)",
treatment_level = avf_ss_treatments)
#cluster number
cluster_number_plot <- bar_plot(df,
time_range = analysis_time_range,
y = "Cluster_count",
plot_title = "Cluster number",
y_lab = "Cluster number per plant",
treatment_level = avf_ss_treatments)
#average cluster weight in g per cluster
df$cluster_weight <- df$Net_Weight/df$Cluster_count * 1000
cluster_weight_plot <- bar_plot(df,
time_range = analysis_time_range,
y = "cluster_weight",
plot_title = "Average cluster weight",
y_lab = "Cluster weight (g)",
treatment_level = avf_ss_treatments)
Rmisc::multiplot(yield_plot, cluster_number_plot, cluster_weight_plot, cols = 3)
by_group_anovas(Net_Weight ~ Treatment + Block, df, treatment_level = avf_ss_treatments,
what = "all", time_range = analysis_time_range)
by_group_anovas(Cluster_count ~ Treatment + Block, df, treatment_level = avf_ss_treatments,
what = "all", time_range = analysis_time_range)
by_group_anovas(cluster_weight ~ Treatment + Block, df, treatment_level = avf_ss_treatments,
what = "all", time_range = analysis_time_range)
#
df <- read_xlsx("G:/My Drive/Documents/RProjects/lab_analysis/AVF_SaltStress.xlsx",
sheet = "S_Berry_wet_chem_homo_vines", na = "NA")
brix_plot <- trend_plot(df,
time_range = analysis_time_range,
y = "Brix",
plot_title = "Average berry weight",
y_lab = "berry weight (g)",
treatment_level = avf_ss_treatments)
by_group_anovas(Brix ~ Treatment + Block, df, treatment_level = avf_ss_treatments,
what = "all", time_range = analysis_time_range)
pH_plot <- trend_plot(df,
time_range = analysis_time_range,
y = "pH",
plot_title = "Average berry weight",
y_lab = "berry weight (g)",
treatment_level = avf_ss_treatments)
by_group_anovas(pH ~ Treatment + Block, df, treatment_level = avf_ss_treatments,
what = "all", time_range = analysis_time_range)
TA_plot <- trend_plot(df,
time_range = analysis_time_range,
y = "TA",
plot_title = "Average berry weight",
y_lab = "berry weight (g)",
treatment_level = avf_ss_treatments)
by_group_anovas(TA ~ Treatment + Block, df, treatment_level = avf_ss_treatments,
what = "all", time_range = analysis_time_range)
#Single ring infiltration ------------------------------------------------------
df <- read_xlsx("G:/My Drive/Documents/RProjects/lab_analysis/AVF_SaltStress.xlsx",
sheet = "S_Single_Ring_Infiltration", na = "NA")
df$Time <- 3/df$Time
#df <- df %>% group_by(Date, Block, Treatment) %>% summarise(Time = mean(Time))
bar_plot(df,
time_range = analysis_time_range,
y = "Time",
plot_title = "Single Ring Infiltration",
y_lab = "Infiltration time (l/min)",
treatment_level = avf_ss_treatments)
by_group_anovas(Time ~ Treatment + Block, df, treatment_level = avf_ss_treatments,
what = "all", time_range = analysis_time_range)
df <- df %>% group_by(Date, Block, Treatment) %>% summarize(Date = unique(Date), Time = mean(Time))
df <- tidyr::pivot_wider(df, names_from = Date, values_from = Time)
df$infiltration_change <- df$`2020-10-18` - df$`2020-07-16`
df$Date <- "2020-10-18 - 2020-07-16"
bar_plot(df,
time_range = analysis_time_range,
y = "infiltration_change",
plot_title = "Infiltration Change",
y_lab = "Infiltration time (l/min)",
treatment_level = avf_ss_treatments)
by_group_anovas(infiltration_change ~ Treatment + Block, df,
treatment_level = avf_ss_treatments,
what = "all", time_range = analysis_time_range)
#infiltration change penalizes 100A
#licor data --------------------------------------------------------------------
df <- read_xlsx("G:/My Drive/Documents/RProjects/lab_analysis/AVF_SaltStress_Main.xlsx",
sheet = "S_Licor", na = "NA")
df %>% dplyr::select(Date:Treatment, E, A, Ca, Ci, gsw, TleafEB, VPDleaf)
trend_plot(df, y = "A", plot_title = "Net Assimilation", y_lab = "An",
treatment_level = avf_ss_treatments, na_omit = FALSE)
df$wuei <- df$A/df$gsw
df$ci_ca <- df$Ci/df$Ca
trend_plot(df, y = "gsw", plot_title = "Stomatal conductance", y_lab = "gsw",
treatment_level = avf_ss_treatments)
trend_plot(df, y = "wuei", plot_title = "Water use efficiency", y_lab = "wuei",
treatment_level = avf_ss_treatments)
trend_plot(df, y = "ci_ca", plot_title = "Ci/Ca",
treatment_level = avf_ss_treatments)
by_group_anovas(A ~ Treatment + Block, df,
treatment_level = avf_ss_treatments,
what = "all", time_range = analysis_time_range)
by_group_anovas(gsw ~ Treatment + Block, df,
treatment_level = avf_ss_treatments,
what = "all", time_range = analysis_time_range)
by_group_anovas(wuei ~ Treatment + Block, df,
treatment_level = avf_ss_treatments,
what = "all", time_range = analysis_time_range)
#intrinsic water use efficiency is worst when using the gypsum than in the control
by_group_anovas(ci_ca ~ Treatment + Block, df,
treatment_level = avf_ss_treatments,
what = "all", time_range = analysis_time_range)
ggplot(df, aes(A, gsw)) + geom_point(aes(color = Treatment)) +
geom_smooth(aes(color = Treatment, fill = Treatment)) +
scale_color_colorblind("wong", name = "Treatment") +
scale_fill_colorblind(Treatment = "wong")
#water use efficiency related to yield
df <-  df %>% group_by(Block, Treatment) %>%
summarise(A = mean(A, na.rm = T), gsw = mean(gsw, na.rm = T),
wuei = mean(wuei, na.rm = T))
#there are errors in the 2020-08-11
yield <- read_xlsx("G:/My Drive/Documents/RProjects/lab_analysis/AVF_SaltStress_Main.xlsx",
sheet = "S_Yield", na = "NA")
yield <- yield %>% group_by(Date, Block, Treatment) %>%
summarise(Net_Weight = mean(Net_Weight, na.rm = TRUE))
yield <- yield[yield$Date > "2020-01-01", ]
df <- left_join(df, yield[c("Block", "Treatment", "Net_Weight")])
df$Date <- "2020"
df$yield_wuei <- df$Net_Weight/df$wuei
df$yield_gs <- df$Net_Weight/df$gsw
df$yield_a <- df$Net_Weight/df$A
bar_plot(y = "yield_wuei", df, group_col = "Date")
bar_plot(y = "yield_gs", df, group_col = "Date")
bar_plot(y = "yield_a", df, group_col = "Date")
aov(yield_wuei ~ Treatment + Block, df) %>% summary
aov(yield_gs ~ Treatment + Block, df) %>% summary
aov(yield_a ~ Treatment + Block, df) %>% summary
#install the google-cloud-sdk on linux
#this call to the shell allows to download the list of landsat images available
landsat_scenes <- function(directory_path = "~/Documents/landsat", download = TRUE) {
require("data.table")
#include something to check for the presence and date of the scene_list file, and
#the presence of gsutil on the system
if(download == TRUE) {
system(paste("gsutil cp -n gs://earthengine-public/landsat/scene_list.zip", directory_path))
unzip("~/Documents/landsat/scene_list.zip")
}
fread("~/Documents/landsat/scene_list", sep = "/")
}
#should recompose the string from those columns to avoid repetitions
select_landsat <- function(path = 42,
row  = 35,
sat = "L7",
start_date = as.Date("2003-01-01"),
end_date = as.Date("2016-12-31"),
all = full_list,
remove_scene_list = TRUE) {
require("stringr")
scenes <- data.frame("sat"  = factor(all[[5]]),
"path" = all[[6]],
"row"  = all[[7]],
"year" = str_sub(all[[8]], 10, 13),
"doy"  = str_sub(all[[8]], 14, 16),
"scene" = all[[8]])
scenes$date <- as.Date(format(strptime(paste(scenes$year, scenes$doy), format="%Y %j"),
format="%Y-%m-%d"))
selected_scenes <- row.names(scenes[scenes$sat == sat & scenes$path == path & scenes$row == row & scenes$date >= start_date & scenes$date <= end_date,])
selected_scenes <- scenes[as.numeric(selected_scenes),]
path <- paste0("000", path)
row <- paste0("000", row)
row <- str_sub(row, str_length(row)-2, str_length(row))
path <- str_sub(path, str_length(path)-2, str_length(path))
selected_scenes <- paste0("gs://earthengine-public/landsat/", sat, "/",
path, "/", row, "/", selected_scenes$scene)
if(remove_scene_list) {
system("rm ./scene_list")
system("rm ./scene_list.zip")
}
return(selected_scenes)
}
cp_single_scene <- function(scene_path, directory_path = "~/Documents/landsat"){
if(!dir.exists("./tmp")) dir.create("./tmp")
directory_path <- paste0(directory_path, "/tmp")
system(paste("gsutil cp -n", scene_path, directory_path))
untar(paste0(directory_path, "/", strsplit(scene_path, "/")[[1]][8]), exdir = "./tmp")
#add a function that check for presence of previous images and avoid to download twice
}
subsample_scenes <- function(scene_path, scene_mask, output_dir){
require("raster")#to crop
require("R.utils")#this package can be eventually changed with a call to gzip or gunzip at system level
scene <- strsplit(scene_path, "/")[[1]][8]
#for now it works for all bands in the landsat (eventually TO DO: remove all )
bands <- list.files(path = "./tmp", pattern = ".TIF")
#to crop according to the scene mask
crop_scenes <- function(bands, directory_path = "./tmp/") {
require(raster)
lapply(bands, function(b) {
scene <- crop(raster(paste0(directory_path, b)), scene_mask)
writeRaster(scene, paste0(directory_path, b), format = "GTiff", overwrite = TRUE)
})}
crop_scenes(bands)
#remove original files to keep only selected light weight scenes
lapply(bands, function(b) system(paste0("rm ", "./tmp/", b)))
system(paste0("rm ", "./tmp/", scene))
system("rm ./tmp/README.GTF")
#TO DO: the gap mask is not always present, pass this to a tryCatch or a if expression
gap_masks <- list.files(path = "./tmp/gap_mask", pattern = str_split(bands[1], "_")[[1]][2])
if(!dir.exists("./tmp/gm")) dir.create("./tmp/gm")
lapply(gap_masks, function(gm) {
gunzip(file.path(".", "tmp", "gap_mask", gm),
destname = paste0("./", "tmp/gm/", strsplit(gm, "\\.")[[1]][1], ".TIF"),
remove = FALSE)
})
bands <- list.files(path = "./tmp/gm", pattern = ".TIF")
#TO DO: include here a check for presence of gap mask before going on to avoid presence of empty gm folders
crop_scenes(bands, directory_path = "./tmp/gm/")
lapply(bands, function(b) system(paste0("rm ", "./tmp/gm/", b)))
system("rm -r ./tmp/gap_mask")
#change the name to all file to ensure that this function can be reused for files
#that have already been cropped once using this function (it uses .TIF files to read the file list, etc.)
system("cd ./tmp; rename 's/.tif/.TIF/' *.tif")
system("cd ./tmp/gm; rename 's/.tif/.TIF/' *.tif")
if(!dir.exists(paste0("./", output_dir))) dir.create(paste0("./", output_dir))
scene <- str_split(scene, "\\.")[[1]][1]
#reput the extracted files in the tmp dir in a tar archive, the * is to avoid nested directory in the archive
system(paste0("cd tmp && tar -czf ", "../", output_dir, "/", scene, "_mod.tar.gz", " *"))
system("rm -r tmp")
}
#import the scene mask and then reproject according to the extension of the landsat files to
#download
require("raster")
scene_mask <- shapefile("~/Documents/landsat/pasoShp/pasoRoblesAVA.shp")
scene_mask <- spTransform(scene_mask, crs("+proj=utm +zone=11 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0"))
require("magrittr")
paso_scenes <- landsat_scenes(download = TRUE) %>% select_landsat(all = .)
#function to extract landsat information
require("rLandsat")
install.packages("rLandsat")
#function to extract landsat information
require("devtools")
install.packages("devtools")
devtools::install_github("atlanhq/rLandsat")
devtools::install_github("atlanhq/rLandsat")
devtools::install_github("atlanhq/rLandsat")
install.packages("rlang")
devtools::install_github("atlanhq/rLandsat")
devtools::install_github("atlanhq/rLandsat")
devtools::install_github("atlanhq/rLandsat")
devtools::install_github("atlanhq/rLandsat", force = TRUE)
devtools::install_github("atlanhq/rLandsat", force = TRUE)
espa_creds(username = "LucaBrillante", password = "pM4AsSaBK.dZe4m")
#function to extract landsat information
require("rLandsat") #this is github package not available on cran
espa_creds(username = "LucaBrillante", password = "pM4AsSaBK.dZe4m")
landsat_search(min_date = "2020-05-01", max_date = "2020-08-31", country = "california")
landsat_search(min_date = "2020-05-01", max_date = "2020-08-31", country = "USA")
landsat_search(min_date = "2020-05-01", max_date = "2020-08-31", country = "india")
landsat_search(min_date = "2020-05-01", max_date = "2020-08-31",
path_master = 20, row_master = 20)
landsat_search(min_date = "2020-05-01", max_date = "2020-08-31",
path_master = 20, row_master = 20, source = "usgs")
tmp <- landsat_search(min_date = "2020-05-01", max_date = "2020-08-31",
path_master = 20, row_master = 20, source = "usgs")
tmp
#include something to check for the presence and date of the scene_list file, and
#the presence of gsutil on the system
if(download == TRUE) {
system(paste("gsutil cp -n gs://earthengine-public/landsat/scene_list.zip", directory_path))
unzip("~/Documents/landsat/scene_list.zip")
}
fread("~/Documents/landsat/scene_list", sep = "/")
#include something to check for the presence and date of the scene_list file, and
#the presence of gsutil on the system
if(download == TRUE) {
system(paste("gsutil cp -n gs://earthengine-public/landsat/scene_list.zip", directory_path))
unzip("~/Documents/landsat/scene_list.zip")
}
#install the google-cloud-sdk on linux
#this call to the shell allows to download the list of landsat images available
landsat_scenes <- function(directory_path = "~/Documents/landsat", download = TRUE) {
require("data.table")
#include something to check for the presence and date of the scene_list file, and
#the presence of gsutil on the system
if(download == TRUE) {
system(paste("gsutil cp -n gs://earthengine-public/landsat/scene_list.zip", directory_path))
unzip("~/Documents/landsat/scene_list.zip")
}
fread("~/Documents/landsat/scene_list", sep = "/")
}
directory_path = "~/Documents/landsat"
ystem(paste("gsutil cp -n gs://earthengine-public/landsat/scene_list.zip", directory_path))
system(paste("gsutil cp -n gs://earthengine-public/landsat/scene_list.zip", directory_path))
